from django.db import models
from django.utils import timezone
from django.contrib.auth.models import AbstractUser

class User(AbstractUser):
    USER_TYPES = [
        ('responder', 'Responder'),
        ('neighborhood', 'Neighborhood'),
        ('admin', 'Admin'),
    ]

    first_name = models.CharField(max_length=40, null=False)
    last_name = models.CharField(max_length=40, null=False)
    department = models.CharField(max_length=255, null=False)
    role = models.CharField(max_length=20, choices=USER_TYPES, default='neighborhood')
    created_at = models.DateTimeField(auto_now_add=True)  
    updated_at = models.DateTimeField(auto_now=True)  

    def __str__(self):
        return f"{self.username} ({self.get_role_display()})"


class Neighborhood(models.Model):
    """Represents a neighborhood being monitored"""
    name = models.CharField(max_length=100)
    location = models.CharField(max_length=200)
    created_at = models.DateTimeField(auto_now_add=True)
    
    def __str__(self):
        return self.name

class SecurityDevice(models.Model):
    """IoT devices used in the security system"""
    DEVICE_TYPES = [
        ('CAM', 'Camera'),
        ('MIC', 'Microphone'),
        ('MOT', 'Motion Sensor'),
        ('OTHER', 'Other'),
    ]
    
    neighborhood = models.ForeignKey(Neighborhood, on_delete=models.CASCADE)
    device_id = models.CharField(max_length=50, unique=True)
    device_type = models.CharField(max_length=5, choices=DEVICE_TYPES)
    location = models.CharField(max_length=200)
    is_active = models.BooleanField(default=True)
    last_ping = models.DateTimeField(null=True, blank=True)
    
    def __str__(self):
        return f"{self.get_device_type_display()} ({self.device_id})"


class Incident(models.Model):
    """Unified incident model for reports, devices, media, and AI analysis."""

    # Basic incident info
    incident_type = models.CharField(max_length=400, null=True, blank=True)
    description = models.TextField()
    timestamp = models.DateTimeField(default=timezone.now)

    # Device info
    device_id = models.CharField(max_length=50)  # Unique identifier from the Tkinter app
    device_type = models.CharField(max_length=10, null=True, blank=True)  # e.g., CAM, MIC
    device_location = models.CharField(max_length=200, null=True, blank=True)

    # Optional neighborhood context
    neighborhood = models.CharField(max_length=100, null=True, blank=True)

    # Media evidence
    evidence_file = models.FileField(upload_to='evidence/%Y/%m/%d/', null=True, blank=True)
    evidence_type = models.CharField(max_length=10, null=True, blank=True)  # IMAGE, AUDIO, VIDEO

    # AI analysis will be updated later
    ai_analysis = models.JSONField(null=True, blank=True)

    # Alerting and severity
    severity = models.IntegerField(default=1)  # 1 (low) to 5 (critical)
    alert_message = models.TextField(null=True, blank=True)
    is_verified = models.BooleanField(default=False)
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"{self.incident_type} at {self.timestamp} by device {self.device_id}"


class Evidence(models.Model):
    """Media evidence associated with incidents"""
    EVIDENCE_TYPES = [
        ('IMAGE', 'Image'),
        ('AUDIO', 'Audio'),
        ('VIDEO', 'Video'),
    ]
    incident = models.ForeignKey(Incident, on_delete=models.CASCADE, related_name='evidences')
    evidence_type = models.CharField(max_length=5, choices=EVIDENCE_TYPES)
    file = models.FileField(upload_to='evidence/%Y/%m/%d/')
    created_at = models.DateTimeField(auto_now_add=True)
    ai_analysis = models.JSONField(null=True, blank=True)  # Stores AI analysis results
    
    def __str__(self):
        return f"{self.get_evidence_type_display()} for {self.incident}"

class AIAnalysis(models.Model):
    """Results from AI processing"""
    ANALYSIS_TYPES = [
        ('SOUND', 'Sound Pattern'),
        ('MOTION', 'Motion Pattern'),
        ('FACE', 'Face Recognition'),
        ('OBJECT', 'Object Detection'),
    ]
    
    evidence = models.ForeignKey(Evidence, on_delete=models.CASCADE)
    analysis_type = models.CharField(max_length=10, choices=ANALYSIS_TYPES)
    results = models.JSONField()  # Raw AI results
    confidence = models.FloatField()  # 0-1 confidence score
    created_at = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        verbose_name_plural = "AI Analyses"
    
    def __str__(self):
        return f"{self.get_analysis_type_display()} analysis ({self.confidence:.0%})"

class Alert(models.Model):
    """Alerts generated by the system"""
    ALERT_LEVELS = [
        ('LOW', 'Low Priority'),
        ('MED', 'Medium Priority'),
        ('HIGH', 'High Priority'),
        ('CRITICAL', 'Critical'),
    ]
    
    incident = models.ForeignKey(Incident, on_delete=models.CASCADE)
    alert_level = models.CharField(max_length=10, choices=ALERT_LEVELS)
    message = models.TextField()
    is_resolved = models.BooleanField(default=False)
    created_at = models.DateTimeField(auto_now_add=True)
    
    def __str__(self):
        return f"{self.get_alert_level_display()} alert: {self.message[:50]}..."


class ChatMessage(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE, null=True, blank=True)
    conversation = models.JSONField(default=list)
    created_at = models. DateTimeField(auto_now_add=True, null=True)
    updated_at = models.DateTimeField(null=True, blank=True)

    def __str__(self):
        return f'ChatSession {self.id}- {self.user.username}'